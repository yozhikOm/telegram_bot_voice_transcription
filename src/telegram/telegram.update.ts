import { Ctx, InjectBot, On, Start, Update } from '@grammyjs/nestjs'
import { Injectable, Logger } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { Api, Bot, Context } from 'grammy'
//import { AIService } from '../services/ai.service'
import { SpeechService } from '../services/speech.service'

@Update() // –≠—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∫–ª–∞—Å—Å —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram
@Injectable()
export class TelegramUpdate {
	private readonly botToken: string

	constructor(
		@InjectBot() private readonly bot: Bot<Context>, // –í–Ω–µ–¥—Ä–µ–Ω–∏–µ Telegram-–±–æ—Ç–∞
		private readonly speechService: SpeechService, // –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ä–µ—á–∏
		//private readonly aiService: AIService, // –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∞–π–º-–∫–æ–¥–æ–≤
		private readonly configService: ConfigService
	) {
		this.botToken = this.getRequiredConfig('TELEGRAM_BOT_TOKEN')
	}

    private getRequiredConfig(key: string): string {
		const value = this.configService.get<string>(key);
		if (!value) {
			throw new Error(`Missing required environment variable: ${key}`);
		}
		return value;
	}

	@Start() // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
	async onStart(@Ctx() ctx: Context): Promise<void> {
		await ctx.reply(
			'üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ä–∞—Å—Å—Ç–∞–≤–ª—é —Ç–∞–π–º-–∫–æ–¥—ã.'
		)
	}

	@On('message:voice') // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	async onVoiceMessage(@Ctx() ctx: Context): Promise<void> {
		let progressMessageId: number | undefined
		let interval: NodeJS.Timeout | undefined
		let percent = 10 // –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

		try {
			const voice = ctx.msg!.voice
			const duration = voice!.duration

			// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			const file = await ctx.getFile()

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
			await ctx.reply(`üé§ –î–ª–∏–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${duration} —Å–µ–∫.`)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
			const progressMsg = await ctx.reply(this.renderProgress(percent))
			progressMessageId = progressMsg.message_id

			// ‚è± –≠–º—É–ª–∏—Ä—É–µ–º "–æ–∂–∏–≤—à–∏–π" –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
			interval = setInterval(
				async () => {
					if (percent < 90) {
						percent += 5
						await this.updateProgress(
							ctx.api,
							ctx.chat!.id,
							progressMessageId!,
							percent
						)
					}
				},
				duration > 300 ? 3000 : 2000
			)

			// –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é Whisper
			const transcription = await this.speechService.transcribeVoice(
				file.file_path!
			)
            Logger.log('voice transcription:', transcription)
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ OpenAI –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–∞–π–º-–∫–æ–¥—ã + —Å—Ç–æ–∏–º–æ—Å—Ç—å
			// const { timestamps, cost } = await this.aiService.generateTimestamps(
			// 	transcription,
			// 	duration
			// )

			// // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
			// clearInterval(interval)
			// await this.updateProgress(ctx.api, ctx.chat.id, progressMessageId, 100)

			// // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			// await ctx.reply(
			// 	`‚è≥ –¢–∞–π–º-–∫–æ–¥—ã:\n\n${timestamps}\n\n<i>ü§ñ –¢–∞–π–º—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —á–µ—Ä–µ–∑ –Ω–∞—à –±–æ—Ç</i>`,
			// 	{
			// 		parse_mode: 'HTML'
			// 	}
			// )
			// await ctx.reply(cost)
		} catch (error) {
			clearInterval(interval) // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ:', error.message)
            console.error('error.status', error.status)
            console.error('error.headers', error.response.headers);
            console.error('error.data', JSON.stringify(error.response.data))
			await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.')
		}
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
	private async updateProgress(
		api: Api,
		chatId: number,
		messageId: number,
		percent: number
	) {
		await api.editMessageText(chatId, messageId, this.renderProgress(percent))
	}

	// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
	private renderProgress(percent: number): string {
		const totalBlocks = 10 // –í—Å–µ–≥–æ 10 —è—á–µ–µ–∫ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–µ
		const blockChar = '‚ñí' // –°–∏–º–≤–æ–ª, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∏–π "–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é" —è—á–µ–π–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

		// –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –Ω–∞ —à–∫–∞–ª–µ
		const filledBlocks = Math.max(1, Math.round((percent / 100) * totalBlocks))

		/**
		 * üëâ Math.round(...) ‚Äî –æ–∫—Ä—É–≥–ª—è–µ—Ç –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3.6 ‚Üí 4)
		 * üëâ (percent / 100) * totalBlocks ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤
		 * üëâ Math.max(1, ...) ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã 1 –±–ª–æ–∫ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω (–¥–∞–∂–µ –ø—Ä–∏ 0%)
		 */

		const emptyBlocks = totalBlocks - filledBlocks // –û—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ "–ø—É—Å—Ç—ã–µ"

		/**
		 * üëâ String.prototype.repeat(n) ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–∏–º–≤–æ–ª n —Ä–∞–∑
		 * –ü—Ä–∏–º–µ—Ä: '‚ñí'.repeat(4) = '‚ñí‚ñí‚ñí‚ñí'
		 * –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ –ø—É—Å—Ç—É—é —á–∞—Å—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
		 */

		// –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞: üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: [‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 40%
		return `üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: [${blockChar.repeat(filledBlocks)}${'‚ñë'.repeat(emptyBlocks)}] ${percent}%`
	}
}